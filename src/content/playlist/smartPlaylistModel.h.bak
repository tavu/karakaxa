#ifndef SMARTPLAYLISTMODEL_H
#define SMARTPLAYLISTMODEL_H

#include<QAbstractItemModel>
#include<QStandardItemModel>
#include<QDomElement>

#define FOLDER_ITEM	QStandardItem::UserType
#define SMARTPL_ITEM	QStandardItem::UserType+1
#define PLAYLIST_ITEM	QStandardItem::UserType+2
#define ITEM_ROLE	Qt::UserRole 

#define PL_HEAD		0
#define SM_HEAD		1



class standardItemTree :public QStandardItem
{
    public:
	standardItemTree(const QString &text);
	standardItemTree();
	virtual QVariant data( int role = Qt::UserRole + 1 ) const;
	
	virtual ~standardItemTree();	    
	virtual QDomElement xml() const=0;
	virtual int type () const=0;//everybody need a type
};


class folderItem :public standardItemTree
{
    public:
	folderItem(const QString &text);
	folderItem(const QDomElement &el);
	
	int type () const;
	QDomElement xml() const;
	void append (standardItemTree* item );
	virtual void setData ( const QVariant & value, int role = Qt::UserRole + 1 );
    private:
      QDomElement element;
};

class smplaylistItem :public standardItemTree
{
    public:
	smplaylistItem(const QString& text);	
	
	virtual QVariant data ( int role = Qt::UserRole + 1 ) const; 
	int type () const;
	
	inline QString query() const
	{	    
	    if(_query.isEmpty() )
	    {
		generateQuery();
	    }
	    
	    return _query;
	}
	inline void setXmlElement(QDomElement el)
	{
	    element=el;
	}
	
	QDomElement xml() const;
	
    
    private:
	mutable QString _query;
	QDomElement element;
	
	void generateQuery() const;
	QString group(QDomNode nod) const;
};


class smartPlaylistModel :public QStandardItemModel
{
    Q_OBJECT
    public:
	smartPlaylistModel(QObject * parent = 0 );
	~smartPlaylistModel();
 	bool append (standardItemTree* item, const QModelIndex& parent = QModelIndex() );
	bool remove (QModelIndex index);
	
	virtual QVariant data( const QModelIndex & index, int role = Qt::DisplayRole ) const;	
	virtual bool canFetchMore ( const QModelIndex & parent ) const;
	virtual void fetchMore ( const QModelIndex & parent ) ;
	virtual void fetchPlaylist();
	virtual bool hasChildren ( const QModelIndex & parent = QModelIndex() ) const;
	virtual int head(QModelIndex index) const;
    private:
	folderItem *smTree;
	folderItem *plList;
	bool plLIstChildrenFlag;
	
    public slots:
	void save();
      
};

class playlistItem :public standardItemTree
{
    public:
	playlistItem(const QString &path);
	
	virtual QVariant data(int role = Qt::UserRole+1 ) const;	
	QDomElement xml() const;
	int type () const;
	
    private:
	QString path;
};

#endif